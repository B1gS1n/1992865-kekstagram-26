/*
1. Заведите модуль, который будет отвечать за работу с формой. ++

2. Пропишите тегу <form> правильные значения атрибутов method и адрес action для отправки формы на сервер. ++

Обратите внимание. В разделе про работу с сетью мы доработаем механизм отправки данных, а пока достаточно правильных атрибутов у тега <form>. ++

Если форма заполнена верно, то после отправки покажется страница сервера (по адресу из атрибута action тега <form>) с успешно отправленными данными. Если же форма пропустила какие-то некорректные значения, то будет показана страница с допущенными ошибками. В идеале у пользователя не должно быть сценария, при котором он может отправить некорректную форму. ++

3. Проверьте разметку вашего проекта и добавьте недостающие атрибуты. Например, всем обязательным полям нужно добавить атрибут "required". Затем проверьте, правильные ли типы стоят у нужных полей, если нет — проставьте правильные. ++

4. Изучите, что значит загрузка изображения, и как, когда и каким образом показывается форма редактирования изображения. Напишите код и добавьте необходимые обработчики для реализации этого пункта техзадания. В работе вы можете опираться на код показа окна с полноразмерной фотографией, который вы, возможно, уже написали в предыдущей домашней работе. ++

Важно. Подстановка выбранного изображения в форму — это отдельная домашняя работа. В данном задании этот пункт реализовывать не нужно.

5. После реализуйте закрытие формы. ++

Обратите внимание, что при закрытии формы дополнительно необходимо сбрасывать значение поля выбора файла #upload-file. В принципе, всё будет работать, если при повторной попытке загрузить в поле другую фотографию. Но! Событие change не сработает, если пользователь попробует загрузить ту же фотографию, а значит окно с формой не отобразится, что будет нарушением техзадания. Значение других полей формы также нужно сбрасывать. ++

6. Напишите код для валидации формы добавления изображения. Список полей для валидации:

 - Хэш-теги
 - Комментарий

7. Реализуйте логику проверки так, чтобы, как минимум, она срабатывала при попытке отправить форму и не давала этого сделать, если форма заполнена не по правилам. При желании, реализуйте проверки сразу при вводе значения в поле.
*/

import {openModal} from './utility.js';

const form = document.querySelector('.img-upload__form');
const file = form.querySelector ('.img-upload__input');
const imgUploadWindow = form.querySelector ('.img-upload__overlay');
const buttonCloseUploadOverley = form.querySelector('.img-upload__cancel');

const onUploadOverlayKeyKeydown = (evt) => {
  if (evt.key === 'Escape') {
    evt.preventDefault();
    closeUploadOverlay();
  }
};

const openUploadOverlay = () => {
  imgUploadWindow.classList.remove('hidden');
  openModal();
  
  document.addEventListener ('keydown', onUploadOverlayKeyKeydown);
};

function closeUploadOverlay () {
  imgUploadWindow.classList.add('hidden');
  openModal();
  form.reset();
  
  document.removeEventListener('keydown', onUploadOverlayKeyKeydown);
}

file.addEventListener('change', () => {
  openUploadOverlay();
});
buttonCloseUploadOverley.addEventListener('click', () => {
  closeUploadOverlay ();
})

